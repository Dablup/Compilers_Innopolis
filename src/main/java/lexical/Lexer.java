// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: test.flex

package lexical;
import lexical.arithmetic_functions.DivideToken;import lexical.arithmetic_functions.MinusToken;import lexical.arithmetic_functions.PlusToken;import lexical.arithmetic_functions.TimesToken;import lexical.basic_syntax.CloseParanthesisToken;import lexical.basic_syntax.OpenParanthesisToken;import lexical.basic_syntax.QuoteShortToken;import lexical.comparisions.*;import lexical.evaluator.EvalToken;import lexical.identifier.IdentifierToken;import lexical.keywords.*;import lexical.logical_operators.AndToken;import lexical.logical_operators.NotToken;import lexical.logical_operators.OrToken;import lexical.logical_operators.XorToken;import lexical.number_literals.IntegerNumberLiteralToken;import lexical.number_literals.RealNumberLiteralToken;import lexical.operations_on_lists.ConsToken;import lexical.operations_on_lists.HeadToken;import lexical.operations_on_lists.TailToken;import lexical.predicates.*;import java.util.ArrayList;
import java.util.List;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

    /** This character denotes the end of file. */
    public static final int YYEOF = -1;

    /** Initial size of the lookahead buffer. */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\u10ff\u0100";

    private static int [] zzUnpackcmap_top() {
        int [] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
                    "\6\0\1\4\1\5\1\6\3\0\1\7\1\10\1\0"+
                    "\12\11\1\0\1\12\5\0\32\13\6\0\1\14\1\15"+
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\13"+
                    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
                    "\1\35\1\36\1\37\1\40\1\41\1\42\2\13\u0185\0";

    private static int [] zzUnpackcmap_blocks() {
        int [] result = new int[512];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
                    "\1\10\1\11\44\12\1\13\11\12\1\14\22\12\1\15"+
                    "\10\12\1\16\1\12\1\17\1\20\2\12\1\21\1\22"+
                    "\1\12\1\23\7\12\1\24\2\12\1\25\1\26\2\12"+
                    "\1\27\1\30\2\12\1\31\1\12\1\32\3\12\1\33"+
                    "\5\12\1\34\1\12\1\35\1\12\1\36\1\37\1\40"+
                    "\1\12\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
                    "\1\12\1\50\1\51\2\12\1\52\1\53";

    private static int [] zzUnpackAction() {
        int [] result = new int[147];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\43\0\43\0\43\0\106\0\43\0\43\0\43"+
                    "\0\151\0\214\0\43\0\257\0\322\0\365\0\u0118\0\u013b"+
                    "\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\u020d\0\u0230\0\u0253"+
                    "\0\u0276\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b"+
                    "\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483"+
                    "\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\257"+
                    "\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690"+
                    "\0\u06b3\0\257\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785"+
                    "\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d"+
                    "\0\u08c0\0\u08e3\0\u0906\0\u0929\0\257\0\u094c\0\u096f\0\u0992"+
                    "\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\257\0\u0a64\0\257"+
                    "\0\257\0\u0a87\0\u0aaa\0\257\0\257\0\u0acd\0\257\0\u0af0"+
                    "\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08"+
                    "\0\u0c2b\0\257\0\257\0\u0c4e\0\u0c71\0\257\0\257\0\u0c94"+
                    "\0\u0cb7\0\257\0\u0cda\0\257\0\u0cfd\0\u0d20\0\u0d43\0\257"+
                    "\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\257\0\u0e15\0\257"+
                    "\0\u0e38\0\257\0\257\0\257\0\u0e5b\0\257\0\257\0\257"+
                    "\0\257\0\257\0\257\0\257\0\u0e7e\0\257\0\u0ea1\0\u0ec4"+
                    "\0\u0ee7\0\257\0\257";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[147];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                    "\1\12\1\11\1\13\1\14\1\15\1\16\1\17\1\20"+
                    "\1\21\1\22\1\23\1\24\1\25\1\14\1\26\1\27"+
                    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\2\14"+
                    "\1\37\1\40\45\0\1\4\47\0\1\11\1\12\1\11"+
                    "\40\0\3\12\42\0\1\41\1\0\30\14\11\0\1\41"+
                    "\1\0\15\14\1\42\12\14\11\0\1\41\1\0\21\14"+
                    "\1\43\6\14\11\0\1\41\1\0\16\14\1\44\11\14"+
                    "\11\0\1\41\1\0\11\14\1\45\16\14\11\0\1\41"+
                    "\1\0\20\14\1\46\4\14\1\47\2\14\11\0\1\41"+
                    "\1\0\24\14\1\50\3\14\11\0\1\41\1\0\21\14"+
                    "\1\51\6\14\11\0\1\41\1\0\5\14\1\52\22\14"+
                    "\11\0\1\41\1\0\22\14\1\53\5\14\11\0\1\41"+
                    "\1\0\1\14\1\54\3\14\1\55\22\14\11\0\1\41"+
                    "\1\0\11\14\1\56\16\14\11\0\1\41\1\0\16\14"+
                    "\1\57\11\14\11\0\1\41\1\0\21\14\1\60\6\14"+
                    "\11\0\1\41\1\0\13\14\1\61\5\14\1\62\6\14"+
                    "\11\0\1\41\1\0\24\14\1\63\3\14\11\0\1\41"+
                    "\1\0\5\14\1\64\22\14\11\0\1\41\1\0\5\14"+
                    "\1\65\22\14\11\0\1\41\1\0\1\14\1\66\7\14"+
                    "\1\67\16\14\11\0\1\41\1\0\10\14\1\70\17\14"+
                    "\11\0\1\41\1\0\16\14\1\71\11\14\11\0\1\41"+
                    "\42\0\1\41\1\0\4\14\1\72\23\14\11\0\1\41"+
                    "\1\0\5\14\1\73\22\14\11\0\1\41\1\0\15\14"+
                    "\1\74\12\14\11\0\1\41\1\0\25\14\1\75\2\14"+
                    "\11\0\1\41\1\0\24\14\1\76\3\14\11\0\1\41"+
                    "\1\0\1\14\1\77\26\14\11\0\1\41\1\0\15\14"+
                    "\1\100\12\14\11\0\1\41\1\0\5\14\1\101\22\14"+
                    "\11\0\1\41\1\0\1\14\1\102\26\14\11\0\1\41"+
                    "\1\0\1\14\1\103\1\104\6\14\1\105\1\14\1\106"+
                    "\1\14\1\107\3\14\1\110\6\14\11\0\1\41\1\0"+
                    "\14\14\1\111\13\14\11\0\1\41\1\0\22\14\1\112"+
                    "\5\14\11\0\1\41\1\0\15\14\1\113\12\14\11\0"+
                    "\1\41\1\0\15\14\1\114\5\14\1\115\4\14\11\0"+
                    "\1\41\1\0\24\14\1\116\3\14\11\0\1\41\1\0"+
                    "\16\14\1\117\11\14\11\0\1\41\1\0\16\14\1\120"+
                    "\11\14\11\0\1\41\1\0\23\14\1\121\4\14\11\0"+
                    "\1\41\1\0\23\14\1\122\4\14\11\0\1\41\1\0"+
                    "\11\14\1\123\16\14\11\0\1\41\1\0\14\14\1\124"+
                    "\13\14\11\0\1\41\1\0\11\14\1\125\16\14\11\0"+
                    "\1\41\1\0\21\14\1\126\6\14\11\0\1\41\1\0"+
                    "\1\14\1\127\26\14\11\0\1\41\1\0\4\14\1\130"+
                    "\15\14\1\131\5\14\11\0\1\41\1\0\11\14\1\132"+
                    "\16\14\11\0\1\41\1\0\1\14\1\133\26\14\11\0"+
                    "\1\41\1\0\13\14\1\134\14\14\11\0\1\41\1\0"+
                    "\3\14\1\135\24\14\11\0\1\41\1\0\1\14\1\136"+
                    "\26\14\11\0\1\41\1\0\4\14\1\137\23\14\11\0"+
                    "\1\41\1\0\23\14\1\140\4\14\11\0\1\41\1\0"+
                    "\16\14\1\141\11\14\11\0\1\41\1\0\15\14\1\142"+
                    "\12\14\11\0\1\41\1\0\11\14\1\143\16\14\11\0"+
                    "\1\41\1\0\24\14\1\144\3\14\11\0\1\41\1\0"+
                    "\5\14\1\145\22\14\11\0\1\41\1\0\2\14\1\146"+
                    "\25\14\11\0\1\41\1\0\22\14\1\147\5\14\11\0"+
                    "\1\41\1\0\24\14\1\150\3\14\11\0\1\41\1\0"+
                    "\5\14\1\151\22\14\11\0\1\41\1\0\22\14\1\152"+
                    "\5\14\11\0\1\41\1\0\7\14\1\153\20\14\11\0"+
                    "\1\41\1\0\23\14\1\154\4\14\11\0\1\41\1\0"+
                    "\24\14\1\155\3\14\11\0\1\41\1\0\20\14\1\156"+
                    "\7\14\11\0\1\41\1\0\13\14\1\157\14\14\11\0"+
                    "\1\41\1\0\5\14\1\160\22\14\11\0\1\41\1\0"+
                    "\13\14\1\161\14\14\11\0\1\41\1\0\12\14\1\162"+
                    "\15\14\11\0\1\41\1\0\4\14\1\163\23\14\11\0"+
                    "\1\41\1\0\13\14\1\164\14\14\11\0\1\41\1\0"+
                    "\23\14\1\165\4\14\11\0\1\41\1\0\16\14\1\166"+
                    "\11\14\11\0\1\41\1\0\16\14\1\167\11\14\11\0"+
                    "\1\41\1\0\23\14\1\170\4\14\11\0\1\41\1\0"+
                    "\22\14\1\171\5\14\11\0\1\41\1\0\13\14\1\172"+
                    "\14\14\11\0\1\41\1\0\1\14\1\173\26\14\11\0"+
                    "\1\41\1\0\4\14\1\174\23\14\11\0\1\41\1\0"+
                    "\5\14\1\175\22\14\11\0\1\41\1\0\22\14\1\176"+
                    "\5\14\11\0\1\41\1\0\20\14\1\177\7\14\11\0"+
                    "\1\41\1\0\5\14\1\200\22\14\11\0\1\41\1\0"+
                    "\21\14\1\201\6\14\11\0\1\41\1\0\22\14\1\202"+
                    "\5\14\11\0\1\41\1\0\5\14\1\203\22\14\11\0"+
                    "\1\41\1\0\5\14\1\204\22\14\11\0\1\41\1\0"+
                    "\5\14\1\205\22\14\11\0\1\41\1\0\14\14\1\206"+
                    "\13\14\11\0\1\41\1\0\13\14\1\207\14\14\11\0"+
                    "\1\41\1\0\23\14\1\210\4\14\11\0\1\41\1\0"+
                    "\13\14\1\211\14\14\11\0\1\41\1\0\13\14\1\212"+
                    "\14\14\11\0\1\41\1\0\1\14\1\213\26\14\11\0"+
                    "\1\41\1\0\20\14\1\214\7\14\11\0\1\41\1\0"+
                    "\24\14\1\215\3\14\11\0\1\41\1\0\15\14\1\216"+
                    "\12\14\11\0\1\41\1\0\21\14\1\217\6\14\11\0"+
                    "\1\41\1\0\1\14\1\220\26\14\11\0\1\41\1\0"+
                    "\5\14\1\221\22\14\11\0\1\41\1\0\13\14\1\222"+
                    "\14\14\11\0\1\41\1\0\20\14\1\223\7\14";

    private static int [] zzUnpackTrans() {
        int [] result = new int[3850];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /** Error code for "Unknown internal scanner error". */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /** Error code for "could not match input". */
    private static final int ZZ_NO_MATCH = 1;
    /** Error code for "pushback value was too large". */
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\3\11\1\1\3\11\2\1\1\11\210\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[147];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** Input device. */
    private java.io.Reader zzReader;

    /** Current state of the DFA. */
    private int zzState;

    /** Current lexical state. */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** Text position at the last accepting state. */
    private int zzMarkedPos;

    /** Current text position in the buffer. */
    private int zzCurrentPos;

    /** Marks the beginning of the {@link #yytext()} string in the buffer. */
    private int zzStartRead;

    /** Marks the last character in the buffer, that has been read from input. */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /** Number of newlines encountered up to the start of the matched text. */
    private int yyline;

    /** Number of characters from the last newline up to the start of the matched text. */
    private int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;

    /* user code: */
    List<Token> list = new ArrayList<>();

    public List<Token> getList() {
        return list;
    }

    public void setList(List<Token> list) {
        this.list = list;
    }

    boolean isCommentLine = false;


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char)c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }


    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }


    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
    }


    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     *
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }


    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *     {@link #yylength()}.
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }




    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception java.io.IOException if any I/O-Error occurs.
     */
    public Token tokenize() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { throw new Error("Illegal character <"+yytext()+">");
                    }
                    // fall through
                    case 44: break;
                    case 2:
                    {
                    }
                    // fall through
                    case 45: break;
                    case 3:
                    { isCommentLine = false;
                    }
                    // fall through
                    case 46: break;
                    case 4:
                    { if (!isCommentLine) list.add(new QuoteShortToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 47: break;
                    case 5:
                    { if (!isCommentLine) list.add(new OpenParanthesisToken(yyline, yycolumn, yytext()));
                    }
                    // fall through
                    case 48: break;
                    case 6:
                    { if (!isCommentLine) list.add(new CloseParanthesisToken(yyline, yycolumn, yytext()));
                    }
                    // fall through
                    case 49: break;
                    case 7:
                    { if (!isCommentLine) list.add(new IntegerNumberLiteralToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 50: break;
                    case 8:
                    { if (!isCommentLine) list.add(new RealNumberLiteralToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 51: break;
                    case 9:
                    { isCommentLine = true;
                    }
                    // fall through
                    case 52: break;
                    case 10:
                    { if (!isCommentLine) list.add(new IdentifierToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 53: break;
                    case 11:
                    { if (!isCommentLine) list.add(new OrToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 54: break;
                    case 12:
                    { if (!isCommentLine) list.add(new AndToken(yyline, yycolumn, yytext()));
                    }
                    // fall through
                    case 55: break;
                    case 13:
                    { if (!isCommentLine) list.add(new NotToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 56: break;
                    case 14:
                    { if (!isCommentLine) list.add(new XorToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 57: break;
                    case 15:
                    { if (!isCommentLine) list.add(new CondToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 58: break;
                    case 16:
                    { if (!isCommentLine) list.add(new ConsToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 59: break;
                    case 17:
                    { if (!isCommentLine) list.add(new EvalToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 60: break;
                    case 18:
                    { if (!isCommentLine) list.add(new FuncToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 61: break;
                    case 19:
                    { if (!isCommentLine) list.add(new HeadToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 62: break;
                    case 20:
                    { if (!isCommentLine) list.add(new LessToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 63: break;
                    case 21:
                    { if (!isCommentLine) list.add(new PlusToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 64: break;
                    case 22:
                    { if (!isCommentLine) list.add(new ProgToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 65: break;
                    case 23:
                    { if (!isCommentLine) list.add(new SetqToken(yyline, yycolumn, yytext()));
                    }
                    // fall through
                    case 66: break;
                    case 24:
                    { if (!isCommentLine) list.add(new TailToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 67: break;
                    case 25:
                    { if (!isCommentLine) list.add(new BreakToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 68: break;
                    case 26:
                    { if (!isCommentLine) list.add(new EqualToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 69: break;
                    case 27:
                    { if (!isCommentLine) list.add(new IsIntToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 70: break;
                    case 28:
                    { if (!isCommentLine) list.add(new MinusToken(yyline,yycolumn, yytext()));
                    }
                    // fall through
                    case 71: break;
                    case 29:
                    { if (!isCommentLine) list.add(new QuoteToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 72: break;
                    case 30:
                    { if (!isCommentLine) list.add(new TimesToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 73: break;
                    case 31:
                    { if (!isCommentLine) list.add(new WhileToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 74: break;
                    case 32:
                    { if (!isCommentLine) list.add(new DivideToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 75: break;
                    case 33:
                    { if (!isCommentLine) list.add(new IsAtomToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 76: break;
                    case 34:
                    { if (!isCommentLine) list.add(new IsBoolToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 77: break;
                    case 35:
                    { if (!isCommentLine) list.add(new IsListToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 78: break;
                    case 36:
                    { if (!isCommentLine) list.add(new IsNullToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 79: break;
                    case 37:
                    { if (!isCommentLine) list.add(new IsRealToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 80: break;
                    case 38:
                    { if (!isCommentLine) list.add(new LambdaToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 81: break;
                    case 39:
                    { if (!isCommentLine) list.add(new LessEqToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 82: break;
                    case 40:
                    { if (!isCommentLine) list.add(new ReturnToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 83: break;
                    case 41:
                    { if (!isCommentLine) list.add(new GreaterToken(yyline,yycolumn, yytext()));
                    }
                    // fall through
                    case 84: break;
                    case 42:
                    { if (!isCommentLine) list.add(new NonEqualToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 85: break;
                    case 43:
                    { if (!isCommentLine) list.add(new GreaterEqToken(yyline,yycolumn,yytext()));
                    }
                    // fall through
                    case 86: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
